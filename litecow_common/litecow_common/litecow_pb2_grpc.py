# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from litecow_common import litecow_pb2 as litecow__common_dot_litecow__pb2


class ICOWStub(object):
    """Inference with Collected Onnx Weights service definition 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_cv_inference = channel.unary_unary(
                '/ICOW/get_cv_inference',
                request_serializer=litecow__common_dot_litecow__pb2.ComputerVisionRequest.SerializeToString,
                response_deserializer=litecow__common_dot_litecow__pb2.ResponseDict.FromString,
                )


class ICOWServicer(object):
    """Inference with Collected Onnx Weights service definition 
    """

    def get_cv_inference(self, request, context):
        """get compute vision inference
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ICOWServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_cv_inference': grpc.unary_unary_rpc_method_handler(
                    servicer.get_cv_inference,
                    request_deserializer=litecow__common_dot_litecow__pb2.ComputerVisionRequest.FromString,
                    response_serializer=litecow__common_dot_litecow__pb2.ResponseDict.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ICOW', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ICOW(object):
    """Inference with Collected Onnx Weights service definition 
    """

    @staticmethod
    def get_cv_inference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ICOW/get_cv_inference',
            litecow__common_dot_litecow__pb2.ComputerVisionRequest.SerializeToString,
            litecow__common_dot_litecow__pb2.ResponseDict.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
